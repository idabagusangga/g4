{"ast":null,"code":"var _jsxFileName = \"/Users/angga/Documents/gaspack/src/Page/index.js\",\n    _s = $RefreshSig$();\n\nimport axios from 'axios';\nimport React, { useState, useEffect } from 'react';\nimport { Text } from '../Components';\nimport Card from '../Components/Card';\nimport { Colors } from '../Constants';\nimport StyledDiv from './styled';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function TablePage(props) {\n  _s();\n\n  // states\n  const [state, setState] = useState({\n    data: [],\n    page: 1,\n    pageSize: 10,\n    result: 10,\n    trending: [],\n    isCover: true\n  });\n  /**\n   * call api on first init\n   */\n\n  useEffect(() => {\n    getApiData();\n    getTrending();\n  }, []);\n  /**\n   * Api get function and sets data state.\n   */\n\n  const getApiData = async () => {\n    const query = `\n            query ($page: Int, $perPage: Int) {\n                Page(page: $page, perPage: $perPage) {\n                pageInfo {\n                    total\n                    perPage\n                }\n                media(type: ANIME, sort: FAVOURITES_DESC) {\n                    id\n                    title {\n                        romaji\n                        english\n                        native\n                    }\n                    type\n                    genres\n                    siteUrl\n                    averageScore\n                    popularity\n                    coverImage {\n                        large\n                    }\n                    \n                    \n                }\n                }\n            }\n        `;\n    let variables = {\n      page: 1,\n      perPage: 10\n    };\n    const headers = {\n      \"Content-Type\": \"application/json\",\n      \"Accept\": \"application/json\"\n    };\n    const result = await axios({\n      url: 'https://graphql.anilist.co',\n      method: 'post',\n      headers,\n      data: {\n        \"query\": query,\n        \"variables\": variables\n      }\n    }).catch(err => console.log(err.message));\n    setState(state => ({ ...state,\n      data: result.data.data.Page.media\n    }));\n  };\n\n  const getTrending = async () => {\n    const query = `\n            query ($page: Int, $perPage: Int) {\n                Page(page: $page, perPage: $perPage) {\n                pageInfo {\n                    total\n                    perPage\n                }\n                media(type: ANIME, sort: TRENDING_DESC) {\n                    id\n                    title {\n                        romaji\n                        english\n                        native\n                    }\n                    type\n                    genres\n                    siteUrl\n                    averageScore\n                    popularity\n                    coverImage {\n                        large\n                    }\n                    format\n                    \n                }\n                }\n            }\n        `;\n    let variables = {\n      page: 1,\n      perPage: 10\n    };\n    const headers = {\n      \"Content-Type\": \"application/json\",\n      \"Accept\": \"application/json\"\n    };\n    const result = await axios({\n      url: 'https://graphql.anilist.co',\n      method: 'post',\n      headers,\n      data: {\n        \"query\": query,\n        \"variables\": variables\n      }\n    }).catch(err => console.log(err.message));\n    setState(state => ({ ...state,\n      trending: result.data.data.Page.media\n    }));\n  };\n\n  const renderCards = data => {\n    return data.map((d, i) => {\n      return /*#__PURE__*/_jsxDEV(Card, {\n        background: d.coverImage.large,\n        title: d.title.english,\n        genres: d.genres,\n        type: d.type,\n        averageScore: d.averageScore,\n        popularity: d.popularity,\n        siteUrl: d.siteUrl\n      }, d.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 135,\n        columnNumber: 20\n      }, this);\n    });\n  };\n\n  return /*#__PURE__*/_jsxDEV(StyledDiv, {\n    isCover: state.isCover,\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"outer-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"modal-container\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 152,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"inner-container flex-col width100\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"title-container flex-col width100\",\n          children: /*#__PURE__*/_jsxDEV(Text, {\n            content: \"List\",\n            style: \"title\",\n            bold: true\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 158,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 156,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 155,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 151,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 148,\n    columnNumber: 9\n  }, this);\n}\n\n_s(TablePage, \"VuZYYkKw6SE0AYcM4hFxHx2MDW8=\");\n\n_c = TablePage;\n\nvar _c;\n\n$RefreshReg$(_c, \"TablePage\");","map":{"version":3,"names":["axios","React","useState","useEffect","Text","Card","Colors","StyledDiv","TablePage","props","state","setState","data","page","pageSize","result","trending","isCover","getApiData","getTrending","query","variables","perPage","headers","url","method","catch","err","console","log","message","Page","media","renderCards","map","d","i","coverImage","large","title","english","genres","type","averageScore","popularity","siteUrl","id"],"sources":["/Users/angga/Documents/gaspack/src/Page/index.js"],"sourcesContent":["import axios from 'axios'\nimport React, {useState, useEffect} from 'react'\nimport { Text } from '../Components'\nimport Card from '../Components/Card'\nimport { Colors } from '../Constants'\nimport StyledDiv from './styled'\n\nexport default function TablePage(props) {\n    // states\n    const [state, setState] = useState({\n        data: [],\n        page: 1,\n        pageSize: 10,\n        result: 10,\n        trending: [],\n        isCover: true,\n    })\n    \n    /**\n     * call api on first init\n     */\n    useEffect(() => {\n        getApiData()\n        getTrending()\n    }, [])\n    /**\n     * Api get function and sets data state.\n     */\n    const getApiData = async () => {\n        const query = `\n            query ($page: Int, $perPage: Int) {\n                Page(page: $page, perPage: $perPage) {\n                pageInfo {\n                    total\n                    perPage\n                }\n                media(type: ANIME, sort: FAVOURITES_DESC) {\n                    id\n                    title {\n                        romaji\n                        english\n                        native\n                    }\n                    type\n                    genres\n                    siteUrl\n                    averageScore\n                    popularity\n                    coverImage {\n                        large\n                    }\n                    \n                    \n                }\n                }\n            }\n        `\n        let variables = {\n            page: 1,\n            perPage: 10,\n        };\n        const headers = {\n            \"Content-Type\": \"application/json\",\n            \"Accept\": \"application/json\",\n        };\n        const result = await axios({\n            url: 'https://graphql.anilist.co',\n            method: 'post',\n            headers,\n            data: {\n                \"query\" : query,\n                \"variables\" : variables\n            }\n        }).catch((err) => console.log(err.message));\n        setState(state => ({\n            ...state,\n            data: result.data.data.Page.media\n        }))\n    }\n\n    const getTrending = async () => {\n        const query = `\n            query ($page: Int, $perPage: Int) {\n                Page(page: $page, perPage: $perPage) {\n                pageInfo {\n                    total\n                    perPage\n                }\n                media(type: ANIME, sort: TRENDING_DESC) {\n                    id\n                    title {\n                        romaji\n                        english\n                        native\n                    }\n                    type\n                    genres\n                    siteUrl\n                    averageScore\n                    popularity\n                    coverImage {\n                        large\n                    }\n                    format\n                    \n                }\n                }\n            }\n        `\n        let variables = {\n            page: 1,\n            perPage: 10,\n        };\n        const headers = {\n            \"Content-Type\": \"application/json\",\n            \"Accept\": \"application/json\",\n        };\n        const result = await axios({\n            url: 'https://graphql.anilist.co',\n            method: 'post',\n            headers,\n            data: {\n                \"query\" : query,\n                \"variables\" : variables\n            }\n        }).catch((err) => console.log(err.message));\n        setState(state => ({\n            ...state,\n            trending: result.data.data.Page.media\n        }))\n    }\n\n    const renderCards = (data) => {\n        return data.map((d,i) => {\n            return <Card\n                key = {d.id}\n                background = {d.coverImage.large}\n                title = {d.title.english}\n                genres = {d.genres}\n                type = {d.type}\n                averageScore = {d.averageScore}\n                popularity = {d.popularity}\n                siteUrl = {d.siteUrl}\n            />\n        })\n    }\n    return (\n        <StyledDiv\n            isCover = {state.isCover}\n        >\n            <div className = 'outer-container'>\n                <div className = 'modal-container'>\n\n                </div>\n                <div className = 'inner-container flex-col width100'>\n                    <div className = 'title-container flex-col width100'>\n\n                        <Text content = 'List' style = 'title' bold/>\n\n                    </div>\n                    {/* <div className = 'card-container flex-row'>\n                        {renderCards(state.data)}\n\n                    </div> */}\n                    \n                    \n                    \n                </div>\n            </div>\n        </StyledDiv>\n    )\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}